
******************************************************************************
committing to the previous commit only:
	Let’s say we have committed one commit and just after committing we realize there was 	typo issue or any small issue got committed.

	In order to not to have another commit, we can commit new changes to previous commit 	only. 
	
	git commit --amend -m "an updated commit message" // if we want new 	message in next commit
	git commit --amend --no-edit // same message with previous commit

	NOTE: this amend commit works for only previous commit. Not for last 5 commit.

******************************************************************************
Git Head:
	Head is simply a pointer which refer to current “location” in your repository.
	It just referencing to the particular branch.

******************************************************************************
Git Stash:
	Let’s say I am working on branch feature/skm/test and I have modified 5 files but at the 	same time My friends seek for some help and I have to switch to his branch but I have 5 	files changes in my current branch feature/skm/test. 
								If i switch to other branch, I will loose 	all the changes to my branch and to avoid this we use stash command.
	
	git stash: It basically save all the 5 files changes. So after performing git stash I will be able 	to switch to my friend branch and once I am done with the help I will again come to my 	branch and  I will do git stash pop, It will bring all the saved changes again to my new 	branch.
						
	1) git stash
2) git stash pop
******************************************************************************
Git Head, detached Head and Head~*:

Git Head > It refers to the latest commit with respect to current branch.

detached Head > If we go back to any previous commit other than last commit, at that time, the 	head will be in detached mode.
	
	git checkout commit_id(let’s say we are travelling on previous 5th commit)
	git log (The head will be in detached mode as it is not pointing to current commit)

Head~* > We can either use commit_id or Head~* to traverse back to any specific commit.
	       Head~3 – traverse 3 commit back.  
 	       Head~5 – traverse 5 commit back.  



******************************************************************************
Undoing changes & Travelling to previous commit:

Undoing not added changes:
	Lets say we have modified some files but we want to revert back those files and don’t want 	to perform add. And commit.

	Git checkout HEAD file_name or * > we are asking to remove all the changes and go back 	to last commit where HEAD is pointing.

	NOTE: Note the same we can achieve using restore command as well.
	git restore <file-name>

Undoing Staged Changes: 
	Removing files from staged i.e after doing git add .
	git restore –-staged file_name 

Undoing committed changes:
	 Lets say we have made couple of commit to master branch and then realize we should had 	make commit on master instead we should had created our own branch and make changes.

	To revert back all the commit to master branch, we can use git reset or git revert.
	
	git reset –hard commit_id, It will revert back changes to this commit_id.
	git revert commit_id, I does the same thing as reset but there is small difference.
	
	git reset vs git revert>
	
	git reset moves the branch pointer backwards, eliminating commits.
	git revert creates a brand new commit which reverse/undo the changes. Will have history.
            
******************************************************************************
Check all the commit_Id:
	git log > display commit logs with details
	git log –oneline  > display commit logs only in one line

******************************************************************************

git pull vs git fetch:
	git pull = git fetch + git merge

git pull means it will pull the record and merge it to current branch.

git pull origin branch_name, 

Here branch_name branch will merge into current branch.
******************************************************************************







